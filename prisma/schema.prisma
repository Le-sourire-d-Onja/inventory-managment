// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Donation {
  id          String    @id @default(uuid())
  name        String
  description String
  email       String
  phone       String
  articles    Article[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Article {
  id         String      @id @default(uuid())
  type       ArticleType @relation(fields: [typeID], references: [id])
  typeID     String
  price      Float
  quantity   Int
  donation   Donation    @relation(fields: [donationID], references: [id], onDelete: Cascade)
  donationID String
}

model Content {
  id          String      @id @default(uuid())
  type        ArticleType @relation(fields: [typeID], references: [id])
  typeID      String
  quantity    Int
  container   Container   @relation(fields: [containerID], references: [id], onDelete: Cascade)
  containerID String
}

model Container {
  id        String        @id @default(uuid())
  weight    Float
  volume    Float
  packaging PackagingType
  demand    Demand        @relation(fields: [demandID], references: [id], onDelete: Cascade)
  demandID  String
  contents  Content[]
}

model Demand {
  id              String       @id @default(uuid())
  status          DemandStatus
  containers      Container[]
  association     Association  @relation(fields: [associationID], references: [id], onDelete: Cascade)
  associationID   String
  validatedAt     DateTime?
  containerizedAt DateTime?
  distributedAt   DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Association {
  id               String          @id @default(uuid())
  name             String          @unique
  type             AssociationType
  person_in_charge String
  address          String
  email            String
  phone            String
  description      String
  demands          Demand[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model ArticleType {
  id     String @id @default(uuid())
  name   String @unique
  weight Float
  volume Float
  price  Float

  articles Article[]
  contents Content[]
}

enum PackagingType {
  CARDBOARD
  FILM
  TIED_STRING
  NAKED
  NONE
}

enum DemandStatus {
  IN_PROGRESS
  VALIDATED
  CONTAINERIZED
  DISTRIBUTED
}

enum AssociationType {
  ASSOCIATION
  INSTITUTIONNEL_MINSAN
  CONGREGATION_RELIGIEUSE
  INDIVIDUEL
  ETABLISSEMENT
}

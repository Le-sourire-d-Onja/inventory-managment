// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Donnation {
  id          String   @id @default(cuid())
  name        String
  description String
  email       String
  phone       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  articles DonnationArticle[]
}

model DonnationArticle {
  id          String      @id @default(cuid())
  value       Float
  number      Int
  donnation   Donnation   @relation(fields: [donnationID], references: [id])
  donnationID String
  type        ArticleType @relation(fields: [typeID], references: [id])
  typeID      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model ContainerContent {
  id          String      @id @default(cuid())
  number      Int
  type        ArticleType @relation(fields: [typeID], references: [id])
  typeID      String
  container   Container   @relation(fields: [containerID], references: [id])
  containerID String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Container {
  id        String             @id @default(cuid())
  weight    Float
  volume    Float
  contents  ContainerContent[]
  demand    AssociationDemand  @relation(fields: [demandID], references: [id])
  demandID  String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model AssociationDemand {
  id            String       @id @default(cuid())
  status        DemandStatus @default(PENDING)
  containers    Container[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Association   Association? @relation(fields: [associationId], references: [id])
  associationId String?
}

model Association {
  id          String              @id @default(cuid())
  name        String              @unique
  responsable String?
  adresse     String?
  phone       String?
  description String?
  demands     AssociationDemand[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model ArticleType {
  id        String             @id @default(cuid())
  type      String             @unique
  articles  DonnationArticle[]
  contents  ContainerContent[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

enum DemandStatus {
  PENDING
  VALIDATED
}
